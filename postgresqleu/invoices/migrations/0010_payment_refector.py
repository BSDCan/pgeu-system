# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2019-01-13 12:10
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
from django.conf import settings
from django.core.serializers.json import DjangoJSONEncoder


def migrate_payment_settings(apps, schema_editor):
    InvoicePaymentMethod = apps.get_model("invoices", "InvoicePaymentMethod")
    for pm in InvoicePaymentMethod.objects.all():
        if pm.classname in ('postgresqleu.util.payment.dummy.DummyPayment',
                            'postgresqleu.util.payment.banktransfer.Banktransfer'):
            # These classes have no configuration to migrate
            continue
        elif pm.classname == 'postgresqleu.util.payment.paypal.Paypal':
            if hasattr(settings, 'PAYPAL_PDT_TOKEN'):
                pm.config = {
                    'sandbox': getattr(settings, 'PAYPAL_SANDBOX', True),
                    'email': settings.PAYPAL_EMAIL,
                    'pdt_token': settings.PAYPAL_PDT_TOKEN,
                    'apiuser': settings.PAYPAL_API_USER,
                    'apipassword': settings.PAYPAL_API_PASSWORD,
                    'signature': settings.PAYPAL_API_SIGNATURE,
                    'report_receiver': settings.PAYPAL_REPORT_RECEIVER,
                    'donation_text': getattr(settings, 'PAYPAL_DONATION_TEXT', 'Paypal Donation'),
                    'accounting_income': getattr(settings, 'ACCOUNTING_PAYPAL_INCOME_ACCOUNT', 1932),
                    'accounting_fee': getattr(settings, 'ACCOUNTING_PAYPAL_FEE_ACCOUNT', 6041),
                    'accounting_transfer': getattr(settings, 'ACCOUNTING_PAYPAL_TRANSFER_ACCOUNT', 1930),
                }
            else:
                pm.active = False
        elif pm.classname == 'postgresqleu.util.payment.adyen.AdyenCreditcard':
            if hasattr(settings, 'ADYEN_MERCHANTACCOUNT'):
                pm.config = {
                    'test': getattr(settings, 'ADYEN_IS_TEST_SYSTEM', True),
                    'apibaseurl': getattr(settings, 'ADYEN_APIBASEURL', 'https://pal-test.adyen.com/'),
                    'merchantaccount': settings.ADYEN_MERCHANTACCOUNT,
                    'signkey': settings.ADYEN_SIGNKEY,
                    'skincode': settings.ADYEN_SKINCODE,
                    'notification_receiver': settings.ADYEN_NOTIFICATION_RECEIVER,
                    'notify_user': settings.ADYEN_NOTIFY_USER,
                    'notify_password': settings.ADYEN_NOTIFY_PASSWORD,
                    'report_user': settings.ADYEN_REPORT_USER,
                    'report_password': settings.ADYEN_REPORT_PASSWORD,
                    'ws_user': settings.ADYEN_WS_USER,
                    'ws_password': settings.ADYEN_WS_PASSWORD,
                    'merchantref_prefix': getattr(settings, 'ADYEN_MERCHANTREF_PREFIX', 'PGEU'),
                    'merchantref_refund_prefix': getattr(settings, 'ADYEN_MERCHANTREF_REFUND_PREFIX', 'PGEUREFUND'),
                    'accounting_authorized': getattr(settings, 'ACCOUNTING_ADYEN_AUTHORIZED_ACCOUNT', 1621),
                    'accounting_payable': getattr(settings, 'ACCOUNTING_ADYEN_PAYABLE_ACCOUNT', 1622),
                    'accounting_fee': getattr(settings, 'ACCOUNTING_ADYEN_FEE_ACCOUNT', 6040),
                    'accounting_merchant': getattr(settings, 'ACCOUNTING_ADYEN_MERCHANT_ACCOUNT', 1971),
                    'accounting_refunds': getattr(settings, 'ACCOUNTING_ADYEN_REFUNDS_ACCOUNT', 2498),
                    'accounting_payout': getattr(settings, 'ACCOUNTING_ADYEN_PAYOUT_ACCOUNT', 1930),
                }
            else:
                pm.active = False
        elif pm.classname == 'postgresqleu.util.payment.adyen.AdyenBanktransfer':
            if hasattr(settings, 'ADYEN_MERCHANTACCOUNT'):
                # BankTransfer currently only has merchant account which is the one that
                # we then use to look up the primary Adyen account from.
                pm.config = {
                    'merchantaccount': settings.ADYEN_MERCHANTACCOUNT,
                }
            else:
                pm.active = False
        elif pm.classname == 'postgresqleu.util.payment.trustly.TrustlyPayment':
            if getattr(settings, 'ENABLE_TRUSTLY', False):
                pm.config = {
                    'test': (settings.TRUSTLY_APIBASE == 'https://test.trustly.com/api/1'),
                    'user': settings.TRUSTLY_USER,
                    'password': settings.TRUSTLY_PASSWORD,
                    'public_key': settings.TRUSTLY_PUBLIC_KEY,
                    'private_key': settings.TRUSTLY_PRIVATE_KEY,
                    'countries': settings.TRUSTLY_COUNTRIES,
                    'notification_receiver': settings. TRUSTLY_NOTIFICATION_RECEIVER,
                    'hold_notifications': getattr(settings, 'TRUSTLY_HOLD_NOTIFICATIONS', False),
                    'accounting_income': getattr(settings, 'ACCOUNTING_TRUSTLY_ACCOUNT', 1972),
                }
            else:
                pm.active = False
        elif pm.classname == 'postgresqleu.util.payment.braintree.Braintree':
            if getattr(settings, 'ENABLE_BRAINTREE', False):
                pm.config = {
                    'sandbox': settings.BRAINTREE_SANDBOX,
                    'merchant_id': settings.BRAINTREE_MERCHANT_ID,
                    'public_key': settings.BRAINTREE_PUBLIC_KEY,
                    'private_key': settings.BRAINTREE_PRIVATE_KEY,
                    'accounting_authorized': getattr(settings, 'ACCOUNTING_BRAINTREE_AUTHORIZED_ACCOUNT', 1621),
                    'accounting_payable': getattr(settings, 'ACCOUNTING_BRAINTREE_PAYABLE_ACCOUNT', 1623),
                    'accounting_payout': getattr(settings, 'ACCOUNTING_BRAINTREE_PAYOUT_ACCOUNT', 1930),
                    'accounting_fee': getattr(settings, 'ACCOUNTING_BRAINTREE_FEE_ACCOUNT', 6040),
                }
            else:
                pm.active = False
        else:
            raise Exception("Unknown invoice payment method %s" % pm.classname)
        pm.save()


def reverse_migrate_payment_settings(apps, schema_editor):
    # Nothing to do here since we only added values to a new field that
    # will be dropped.
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('invoices', '0009_invoices_new_refunds'),
        ('confsponsor', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL("SET CONSTRAINTS ALL IMMEDIATE"),
        migrations.RunSQL(
            """
DELETE FROM invoices_invoicepaymentmethod pm
WHERE NOT ACTIVE
AND NOT EXISTS (SELECT 1 FROM confsponsor_sponsorshiplevel_paymentmethods p WHERE p.invoicepaymentmethod_id=pm.id)
AND NOT EXISTS (SELECT 1 FROM invoices_invoice i WHERE i.paidusing_id=pm.id)
AND NOT EXISTS (SELECT 1 FROM invoices_invoice_allowedmethods m WHERE m.invoicepaymentmethod_id=pm.id)
"""),
        migrations.AddField(
            model_name='invoicepaymentmethod',
            name='config',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='invoicepaymentmethod',
            name='status',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict, encoder=DjangoJSONEncoder),
        ),
        migrations.AlterField(
            model_name='invoicepaymentmethod',
            name='classname',
            field=models.CharField(max_length=200, verbose_name="Implementation class"),
        ),
        migrations.AlterField(
            model_name='invoicepaymentmethod',
            name='active',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(
            migrate_payment_settings,
            reverse_migrate_payment_settings,
        ),
    ]
